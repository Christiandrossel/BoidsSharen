#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
%\usepackage{multicol}

%Farben fuer Programmlisting
\usepackage{listings,xcolor}
\definecolor{pl_background}{rgb}{0.95,0.95,0.95}
\definecolor{pl_comment}{rgb}{0.12, 0.38, 0.18 }
\definecolor{pl_ifelse}{rgb}{0.74,0.74,.29}
\definecolor{pl_keyword}{rgb}{0.37, 0.08, 0.25}
\definecolor{pl_string}{rgb}{0.06, 0.10, 0.98}
% Vordefiniertes Programmlisting
\lstset{
language = Java,
basicstyle = \small\sffamily,
backgroundcolor = \color{pl_background},
stringstyle = \color{pl_string},
keywordstyle = \color{pl_keyword}\bfseries,
commentstyle = \color{pl_comment}\itshape,
frame = lrbt,
numbers = left,
showstringspaces = false,
breaklines = true,
tabsize=4,
xleftmargin = 15pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\rightmargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Dokumentation der Belegarbeit Computergrafik/Visualisierung II Sommersemester
 2018
\begin_inset VSpace 7cm
\end_inset


\end_layout

\begin_layout Author
Christian Drossel (s75931)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename KlassenDiagram Shader.JPG
	scale 65

\end_inset


\end_layout

\begin_layout Section
Vektoren
\end_layout

\begin_layout Standard
Die Klasse Vektor dient als Grundlage für Berechnungen
\end_layout

\begin_layout Subsection
Vektor
\end_layout

\begin_layout Standard
Die Klasse Vektor beschreibt einen Vektor aus der analytischen Geometrie
 und sie besitzt grundlegende Operationen zum Berechnen von Vektoren.
 Außerdem gibt es die Klassen Vektor2D und 3D die von der Klasse Vektor
 erben.
 Diese abgeleiteten Klassen stellen Vektoren des zwei- bzw.
 dreidimensionalen Raum dar und ebenfalls Operationen zur Berechnung.
\end_layout

\begin_layout Subsection
Lineare Algebra
\end_layout

\begin_layout Standard
Die Klasse beinhaltet mathematische Operationen zur Berechnung der Vektoren.
 Außerdem besitzt sie die Besonderheit das sie statisch ist und somit nicht
 als Objekt erzeugt werden muss bzw.
 werden kann.
\end_layout

\begin_layout Subsection
Überprüfe Überlauf
\end_layout

\begin_layout Standard
Diese Klasse dient als zusätzliche Hilfe und Schutz für Ausnahmebehandlungen,
 die bei den Berechnungen eintreten können.
\end_layout

\begin_layout Section
Objekte
\end_layout

\begin_layout Standard
Das Objekt bildet die Agenten des Programmes die sich im Raum aufhalten.
 Sie besitzen ein verhalten.
 
\end_layout

\begin_layout Subsection
BasisObjekt
\end_layout

\begin_layout Standard
Das BasisObjekt bildet die Grundlage.
 Sie ist abstract und besitzt nur Konstruktoren die protected sind.
 Von ihr sollen Subklassen erstellt werden aber es soll keine Instanz erzeugt
 werden.
 Der Konstruktor ist überladen und bekommt die Position als double oder
 als Vektor2D übergeben.
 Neben den Konstruktor weist die Klasse einen primitiven Datentyp auf und
 ein Objekt Vektor2D.
 Die id dient in der Klasse Verhalten eine wesentliche Rolle.
 
\end_layout

\begin_layout Subsection
BewegtesObjekt
\end_layout

\begin_layout Standard
Die Klasse BewegtesObjekt ist abgeleitet von der BasisKlasse und ebenfalls
 abstract.
 Neben ihren überladenen Konstruktoren, bei denen die Position als double
 oder Vektor2D aber auch die Geschwindigkeit und die maximale Geschwindigkeit
 übergeben werden können, besitzt die Klasse zwei primitive Datentypen,
 die Masse und die maximale Geschwindigkeit als double Werte.
 Des Weiteren besitzt die Klasse noch zwei Objekte, ein Vektor2D mit dem
 Namen velocity und das Verhalten.
 Neben diesen Attributen besitzt die Klasse die Funktionen getvelocity,
 getMaxGeschwindigkeit und getMasse, die wie der Name es schon vermuten
 lässt getter Funktionen sind mit der man die Attribute velocity, maxGeschindigk
eit und masse abrufen kann.
 Um das Verhalten zu setzen, besitzt die Klasse auch eine setVerhalten Funktion.
 Der update Funktion wird die Höhe und weite übergeben, die dann das verhalten
 “updaten” soll.
 
\end_layout

\begin_layout Subsection
SchwarmObjekt
\end_layout

\begin_layout Standard
SchwarmObjekt ist eine von BewegtesObjekt abgeleitete Klasse und repräsentiert
 ein einzelnes Objekt des Schwarms.
 Der Konstruktor ist ebenfalls überladen und beinhaltet neben den Aufruf
 des Superkonstruktors auch die Übergabe der RGB Farbwerte, des Radius und
 der id.
 um die Position, id oder den Radius abzufragen besitzt die Klasse getter
 Methoden.
 Mit der Render-Funktion wird das Objekt anschließend gerendert, dazu werden
 die r, g, b Farbwerte und die Position verwendet.
\end_layout

\begin_layout Subsection
ObjectManager
\end_layout

\begin_layout Standard
Die Klasse ObjectManager ist als Singleton-Pattern realisiert und dient
 der Verwaltung des erzeugten SchwarmObjektes.
 Sie beinhaltet eine HashMap zur Verwaltung der SchwarmObjekte.
 Zusätzlich, neben den Konstruktor gibt es Funktionen für das Hinzufügen
 und Entfernen von Objekten, sowie getSchwarmObjekt und getSchwarmobjektSize
 das Schwarmobjekt mit der id oder die Größe des aktuellen SchwarmObjekts
 zurückgeben.
 Außerdem gibt es die Funktionen clone die es nicht erlaubt ein Objekt zu
 „clonen“.
\end_layout

\begin_layout Section
Verhalten
\end_layout

\begin_layout Standard
Das Verhalten beschreibt wie sich ein Objekt im Raum bewegt und reagiert.
\end_layout

\begin_layout Subsection
Verhalten
\end_layout

\begin_layout Standard
Die Klasse Verhalten ist eine Interface Klasse die eine Funktion update
 beinhaltet.
 Somit kann durch ein Strategy-Pattern wie bei dem SchwarmObjekt ein bestimmtes
 bzw.
 passendes Verhalten dem Objekt zugeordnet werden.
 Die Klasse dient also als Schnittstelle zwischen dem Verhalten und dem
 Objekt.
\end_layout

\begin_layout Subsection
SchwarmVerhalten
\end_layout

\begin_layout Standard
SchwarmVerhalten erbt von der Klasse Verhalten und besitzt ein SchwarmObjekt,
 sowie ein ObjectManager und ein Vektor2D der die Kraft repräsentiert.
 Außerdem besitzt sie folgende Funktionen.
\end_layout

\begin_layout Subsubsection
Seperation
\end_layout

\begin_layout Standard
...ist ein Verhalten, das auch bei natürlichen Schwärmen auftritt.
 Es beschreibt den Abstand der Objekte im Schwarm zueinander.
 Bei der Seperation wird der Abstand zwischen zwei Objekten berechnet, dessen
 Differenz genommen und anschließend aus der Differenz die Länge berechnet.
 die Länge wird auf einer variable length-, und die Differenz auf ein helpVec
 Vektor2D gespeichert.
 helpVec wird normalisiert und mit der length diverenziert.
 Am Ende wird der helpVec auf ein Vektor2D mit dem Namen SteeringForce addiert
 und von der Methode zurückgegeben.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

public Vektor2D seperation() throws OverflowException, InfinityException,
 LengthException {      
\end_layout

\begin_layout Plain Layout

	Vektor2D steeringForce = new Vektor2D(0, 0);	
\end_layout

\begin_layout Plain Layout

	Vektor2D helpVec = new Vektor2D();         
\end_layout

\begin_layout Plain Layout

	double length;         
\end_layout

\begin_layout Plain Layout

	for (int i = 1; i <= manager.getSchwarmobjektSize(); i++) {									   
          
\end_layout

\begin_layout Plain Layout

		if (schwarmObjekt.getId() == i) {                 
\end_layout

\begin_layout Plain Layout

			continue;             
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		tmpObj = manager.getSchwarmObjekt(i);
\end_layout

\begin_layout Plain Layout

		if(LineareAlgebra.euklSqrtDistance(tmpObj.getPosition(), schwarmObjekt.getPositio
n()) < (schwarmObjekt.getRadius() * sep)) {
\end_layout

\begin_layout Plain Layout

			if(schwarmObjekt.position.isNotEqual(tmpObj.position)) {																		
                     				helpVec.setPosition(LineareAlgebra.sub(schwarmObjekt.posit
ion, tmpObj.position));
\end_layout

\begin_layout Plain Layout

			    length = helpVec.length();
\end_layout

\begin_layout Plain Layout

	            helpVec.normalize();    
\end_layout

\begin_layout Plain Layout

	            helpVec.div(length);   
\end_layout

\begin_layout Plain Layout

	            steeringForce.add(helpVec);  
\end_layout

\begin_layout Plain Layout

        	}          
\end_layout

\begin_layout Plain Layout

		}      
\end_layout

\begin_layout Plain Layout

	}       
\end_layout

\begin_layout Plain Layout

	return steeringForce;    
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
angleichen
\end_layout

\begin_layout Standard
In der Literatur auch als alignment bezeichnet.
 Dieses Verhalten hat das Ziel, die Geschwindigkeit und Richtung an die
 anderen Nachbar-Objekte im Schwarm anzupassen.
 Dabei werden die umliegenden Objekte betrachtet und dessen abstand ermittelt.
 Ist der Abstand kleiner als der gesetzte Wert, dann passe die Geschwindigkeit
 an in dem der velocity Vektor vom Nachbarn auf das aktuelle Objekt drauf
 addiert wird.
 Anschließend addiere den Counter um +1.
 Nachdem die „for“ Schleife sich durch alle Objekte durchgehangelt hat wird
 der Fall betrachtet, in dem der Counter größer 0 ist.
 In diesen Fall dividieren wir den counter mit unseren ermittelten Geschwindigke
itswert und subtrahieren ihn anschließend mit dem velocity Vektor des SchwarmObj
ektes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public Vektor2D angleichen() throws OverflowException, InfinityException,
 LengthException {    
\end_layout

\begin_layout Plain Layout

    Vektor2D steeringForce = new Vektor2D(0, 0);    
\end_layout

\begin_layout Plain Layout

    int counter = 0;       
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	for (int i = 1; i <= manager.getSchwarmobjektSize(); i++) {						
\end_layout

\begin_layout Plain Layout

		if (schwarmObjekt.getId() == i) {		
\end_layout

\begin_layout Plain Layout

			continue;    
\end_layout

\begin_layout Plain Layout

    	}            
\end_layout

\begin_layout Plain Layout

		tmpObj = manager.getSchwarmObjekt(i);	
\end_layout

\begin_layout Plain Layout

																			 
\end_layout

\begin_layout Plain Layout

		if (LineareAlgebra.euklSqrtDistance(tmpObj.getPosition(), schwarmObjekt.getPositi
on()) < ang * ang) {				              
\end_layout

\begin_layout Plain Layout

			steeringForce.add(tmpObj.getVelocityObj());																		
\end_layout

\begin_layout Plain Layout

       	 counter++;																								
\end_layout

\begin_layout Plain Layout

		}        
\end_layout

\begin_layout Plain Layout

	}        
\end_layout

\begin_layout Plain Layout

	if (counter > 0) {
\end_layout

\begin_layout Plain Layout

		steeringForce.div(counter){																								          
\end_layout

\begin_layout Plain Layout

		steeringForce.sub(schwarmObjekt.getVelocityObj());																	
\end_layout

\begin_layout Plain Layout

	}         
\end_layout

\begin_layout Plain Layout

	return steeringForce;																									
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
zusammenhalten
\end_layout

\begin_layout Standard
Zusammenhalten beschreibt klar den Zusammenhalt des Schwarmes also der einzelnen
 Objekte zueinander.
 Dazu werden, wie bei Angleichen und Seperation, die Umliegenden Objekte
 und deren Position betrachtet.
 Auch hier wird die Länge ermittelt und anschließend mit der Masse multipliziert
 und durch 1 gerechnet, dieser Vektor wird mit der Position multipliziert.
 Schließlich wird dieser neu ermittelte Vektor zurückgegeben.
 Auch hier wird der Fall, dass der Counter größer null ist mit einbezogen.
 In diesen Fall subtrahieren wir den counter mit der ermittelten Kraft SteeringF
orce und subtrahieren ihn nochmal mit der Position des SchwarmObjektes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

public Vektor2D zusammenhalten() throws OverflowException, InfinityException,
 LengthException {
\end_layout

\begin_layout Plain Layout

        Vektor2D steeringForce = new Vektor2D(0, 0);
\end_layout

\begin_layout Plain Layout

        int counter = 0;
\end_layout

\begin_layout Plain Layout

        double lenght;
\end_layout

\begin_layout Plain Layout

        double[] tmp;
\end_layout

\begin_layout Plain Layout

        for (int i = 1; i <= manager.getSchwarmobjektSize(); i++) {
\end_layout

\begin_layout Plain Layout

            if (schwarmObjekt.getId() == i) {
\end_layout

\begin_layout Plain Layout

                continue;
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            tmpObj = manager.getSchwarmObjekt(i);
\end_layout

\begin_layout Plain Layout

            tmp = tmpObj.getPosition();
\end_layout

\begin_layout Plain Layout

            lenght = LineareAlgebra.length(tmp);
\end_layout

\begin_layout Plain Layout

            LineareAlgebra.mult(tmp, (1 / (lenght * schwarmObjekt.getMasse())));
\end_layout

\begin_layout Plain Layout

            steeringForce.add(tmp);
\end_layout

\begin_layout Plain Layout

            counter++;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        if (counter > 0) {
\end_layout

\begin_layout Plain Layout

            steeringForce.div(counter);
\end_layout

\begin_layout Plain Layout

            steeringForce.sub(schwarmObjekt.getPosition());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return steeringForce;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
mouseSeperation
\end_layout

\begin_layout Standard
Bei der mouseSeperation wird die Richtung, der Radius und die Höhe übergeben.
 Die Mausposition wird auf einem double Array gespeichert, wobei hier schon
 die Höhe - Y Position der Maus gerechnet wird.
 Als nächstes wird betrachtet ob der Abstand von der Position zu Maus mit
 dem übergebenen Radius übereinstimmt, tut er das wird weiter überprüft,
 ob das Objekt sich schon auf der Position der Maus befindet.
 Wenn sich das Objekt nicht dort befindet, dann berechnet man die Länge
 aus der Maus Position und der Position des SchwarmObjektes, die man zuvor
 miteinander subtrahiert hat.
 Anschließend normalisiert man diesen ermittelten Vektor helpVec und multiplizie
rt ihn nochmal mit der übergebenen Richtung und der ermittelten Länge.
 Zum Schluss gibt man diesen ermittelten Wert zurück.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

public Vektor2D mouseSeperation(int richtung, int radius, int height) throws
 OverflowException, InfinityException, LengthException {
\end_layout

\begin_layout Plain Layout

	double length;
\end_layout

\begin_layout Plain Layout

    Vektor2D steeringForce = new Vektor2D(0, 0);
\end_layout

\begin_layout Plain Layout

    Vektor2D helpVec = new Vektor2D();
\end_layout

\begin_layout Plain Layout

    double[] mousePos = new double[]{Mouse.getX(), height - Mouse.getY()};
\end_layout

\begin_layout Plain Layout

    if (LineareAlgebra.euklDistance(schwarmObjekt.getPosition(), mousePos)
 < radius) {
\end_layout

\begin_layout Plain Layout

        if (schwarmObjekt.position.isNotEqual(mousePos)) {
\end_layout

\begin_layout Plain Layout

            helpVec.setPosition(LineareAlgebra.sub(schwarmObjekt.position,
 mousePos));
\end_layout

\begin_layout Plain Layout

            length = helpVec.length();
\end_layout

\begin_layout Plain Layout

            helpVec.normalize();
\end_layout

\begin_layout Plain Layout

            helpVec.mult(richtung * length);
\end_layout

\begin_layout Plain Layout

            steeringForce.add(helpVec);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return steeringForce;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
update
\end_layout

\begin_layout Standard
Mit der Methode update, wie der Name schon sagt wird das zum Schluss gezeigt
 Bild immer aktuell gehalten.
 Hier werden die Kräfte aus dem verhalten und einem Festen Wert multipliziert.
 Außerdem ist hier die Fallunterscheidung welche Maustaste man drückt.
 Dabei wird unterschieden ob rechte oder linke Maustaste.
 Mit dem drücken der linken Maustaste (Zeile 6) wird ein negativer Wert
 für die Richtung übergeben.
 Da sich das Objekt auf den Mauszeiger zu bewegen soll.
 Also muss die Distanz zwischen Objekt und Maus abnehmen.
 Wenn die rechte Maustaste gedrückt wird, soll sich das SchwarmObjekt entfernen,
 also wird ein positiver Wert an mouseSeperation übergeben.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

@Override
\end_layout

\begin_layout Plain Layout

public void update(int width, int height) throws OverflowException, InfinityExce
ption, LengthException {
\end_layout

\begin_layout Plain Layout

        kraft.add(LineareAlgebra.mult(seperation(), 10000));
\end_layout

\begin_layout Plain Layout

        kraft.add(LineareAlgebra.mult(angleichen(), 80));
\end_layout

\begin_layout Plain Layout

        kraft.add(LineareAlgebra.mult(zusammenhalten(), (0.2)));
\end_layout

\begin_layout Plain Layout

        if (Mouse.isButtonDown(0)) {
\end_layout

\begin_layout Plain Layout

            kraft.add(mouseSeperation(-5, 500, height));
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        if (Mouse.isButtonDown(1)) {
\end_layout

\begin_layout Plain Layout

            kraft.add(mouseSeperation(5, 200, height));
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        kraft.round();
\end_layout

\begin_layout Plain Layout

        kraft.div(schwarmObjekt.getMasse());
\end_layout

\begin_layout Plain Layout

        schwarmObjekt.getVelocityObj().add(kraft);
\end_layout

\begin_layout Plain Layout

       
\end_layout

\begin_layout Plain Layout

		schwarmObjekt.getVelocityObj().kuerzen(schwarmObjekt.getMaxGeschwindigkeit());
\end_layout

\begin_layout Plain Layout

        schwarmObjekt.position.add(schwarmObjekt.getVelocityObj());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

		schwarmObjekt.position.setXPosition((schwarmObjekt.position.getX() + width)
 % width);
\end_layout

\begin_layout Plain Layout

        schwarmObjekt.position.setYPosition((schwarmObjekt.position.getY() +
 height) % height);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Anzeige
\end_layout

\begin_layout Standard
Die Anzeige ist verantwortlich für die Darstellung des Schwarmverhaltens.
\end_layout

\begin_layout Subsection
BasisFenster
\end_layout

\begin_layout Standard
Die Klasse Basis Fenster ist abstract und bildet die Grundlage für die grafische
 Ausgabe der Objekte.
 Sie besitzt eine Höhe, eine Breite und den Titel des Fensters als Attribute.
 Als Methoden beinhaltet sie die Initialisierung eines LWJGL Displays und
 das Starten des Renderloops.
\end_layout

\begin_layout Subsection
ShaderFenster
\end_layout

\begin_layout Standard
Die Klasse ShaderFenster dient dazu, die Berechnung der Anzeige der Objekte
 auf der Grafikkarte vorzunehmen.
 Dafür wird bei der Erstellung des Shaderprogramms ein Vertex- und ein Fragments
hader erzeugt.
 Deren Shadercode vorher als String festgelegt wurde und anschliesend an
 den glShaderSource übergeben wurde.
 In dem String wird Programmcode übergeben, der unter anderem die RGB Werte
 setzt und aus der Position die Farbe berechnet.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initShader() {
\end_layout

\begin_layout Plain Layout

	progID = glCreateProgram();
\end_layout

\begin_layout Plain Layout

	vertexID = glCreateShader(GL_VERTEX_SHADER);
\end_layout

\begin_layout Plain Layout

	fragmentID = glCreateShader(GL_FRAGMENT_SHADER);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	String vertexCode = "uniform vec2 position;" +
\end_layout

\begin_layout Plain Layout

                "varying vec3 color;" +
\end_layout

\begin_layout Plain Layout

                "void main() {" +
\end_layout

\begin_layout Plain Layout

                "gl_Position = ftransform();" +
\end_layout

\begin_layout Plain Layout

                "float r = position.x - int(position.x);" +
\end_layout

\begin_layout Plain Layout

				"float g = position.y - int(position.x);" +
\end_layout

\begin_layout Plain Layout

                "float b = ( r + g ) / 2;" +
\end_layout

\begin_layout Plain Layout

                "color.xyz = vec3(r,g,b);" +
\end_layout

\begin_layout Plain Layout

                "}"; 
\end_layout

\begin_layout Plain Layout

       String fragmentCode = "varying vec3 color;" +
\end_layout

\begin_layout Plain Layout

                "void main() {" +
\end_layout

\begin_layout Plain Layout

                "gl_FragColor = vec4(color, 1);" +
\end_layout

\begin_layout Plain Layout

                "}";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	glShaderSource(vertexID, vertexCode);
\end_layout

\begin_layout Plain Layout

	glCompileShader(vertexID);
\end_layout

\begin_layout Plain Layout

	glShaderSource(fragmentID, fragmentCode);
\end_layout

\begin_layout Plain Layout

	glCompileShader(fragmentID);
\end_layout

\begin_layout Plain Layout

	glAttachShader(progID, vertexID);
\end_layout

\begin_layout Plain Layout

	glAttachShader(progID, fragmentID);
\end_layout

\begin_layout Plain Layout

	glLinkProgram(progID);														         
\end_layout

\begin_layout Plain Layout

	glValidateProgram(progID);
\end_layout

\begin_layout Plain Layout

	glUseProgram(progID);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
DerSchwarm
\end_layout

\begin_layout Standard
In dieser Klasse wird im Grunde alles Zusammengebaut und erzeugt, denn sie
 besitzt die Main Methode.
 Sie erbt von der Klasse Shaderfenster und generiert ein Fenster.
 Ebenfalls erzeugt sie mit der Methode erzeugeSchwarmObjekt eine bestimmte
 Anzahl an SchwarmObjekte mit deren Position, Masse, Geschwindigkeit, Radius,
 Farbwerten und deren Verhalten.
 Außerdem setzt sie die SchwarmObjekte in den ObjektManager.
 Mit der Methode renderLoop wird unter anderem die Hintergrundfarbe gewählt,
 die Matrix gezeichnet und die SchwarmObjekte gezeichnet.
 In der Main Methode wird das ganze Programm gestartet durch den Aufruf
 new DerSchwarm().start(); .
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Shader.JPG
	scale 50

\end_inset


\end_layout

\begin_layout Section
Exception
\end_layout

\begin_layout Standard
Sind zu Deutsch Ausnahmebehandlungen.
 Sie sind gerade bei unkalkulierbaren Situationen besonders wichtig.
\end_layout

\begin_layout Subsection
InfinityException
\end_layout

\begin_layout Standard
Diese Klasse hält Negative aber auch positive Unendlichkeit (im englischen
 Infinity) ab.
\end_layout

\begin_layout Subsection
LengthException
\end_layout

\begin_layout Standard
Die Klasse LengthException hält falsche Längenangaben ab.
 Wenn zum Beispiel zwei Längen verglichen werden.
\end_layout

\begin_layout Subsection
OverflowException
\end_layout

\begin_layout Standard
Diese Klasse fängt den Überlauf ab.
\end_layout

\end_body
\end_document
